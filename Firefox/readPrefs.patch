changeset:   269911:d5662991779d
tag:         tip
user:        ruengeler <i.ruengeler@fh-muenster.de>
date:        Fri Oct 30 09:22:13 2015 -0700
summary:     Read the preferenced max number of streams like it is done in TCP.

diff --git a/modules/libpref/init/all.js b/modules/libpref/init/all.js
--- a/modules/libpref/init/all.js
+++ b/modules/libpref/init/all.js
@@ -4043,16 +4043,24 @@ pref("font.name.monospace.x-cyrillic", "
 // Override default Unicode fonts
 pref("font.name.serif.x-unicode", "dt-interface system-ucs2.cjk_japan-0");
 pref("font.name.sans-serif.x-unicode", "dt-interface system-ucs2.cjk_japan-0");
 pref("font.name.monospace.x-unicode", "dt-interface user-ucs2.cjk_japan-0");
 
 # AIX
 #endif
 
+#ifdef ENABLE_SCTP
+pref("browser.startup.homepage_override.mstone", "ignore");
+pref("network.http.pipelining"      , true);
+pref("network.http.proxy.pipelining", true);
+pref("network.http.pipelining.maxrequests" , 15);
+pref("network.http.sctp.max-number-of-outgoing-streams" , 50);
+#endif
+
 // Login Manager prefs
 pref("signon.rememberSignons",              true);
 pref("signon.rememberSignons.visibilityToggle", true);
 pref("signon.autofillForms",                true);
 pref("signon.autologin.proxy",              false);
 pref("signon.storeWhenAutocompleteOff",     true);
 pref("signon.ui.experimental",              false);
 pref("signon.debug",                        false);
diff --git a/netwerk/base/nsSocketTransport2.cpp b/netwerk/base/nsSocketTransport2.cpp
--- a/netwerk/base/nsSocketTransport2.cpp
+++ b/netwerk/base/nsSocketTransport2.cpp
@@ -29,16 +29,21 @@
 #include "nsISocketProvider.h"
 #include "nsISSLSocketControl.h"
 #include "nsIPipe.h"
 #include "nsIClassInfoImpl.h"
 #include "nsURLHelper.h"
 #include "nsIDNSService.h"
 #include "nsIDNSRecord.h"
 #include "nsICancelable.h"
+#if defined(ENABLE_SCTP)
+#include "prsctp.h"
+#include "nsIPrefBranch.h"
+#endif
+
 #include <algorithm>
 
 #include "nsPrintfCString.h"
 
 #if defined(XP_WIN)
 #include "nsNativeConnectionHelper.h"
 #endif
 
@@ -382,25 +387,63 @@ nsSocketInputStream::Read(char *buf, uin
         if (NS_FAILED(mCondition))
             return (mCondition == NS_BASE_STREAM_CLOSED) ? NS_OK : mCondition;
 
         fd = mTransport->GetFD_Locked();
         if (!fd)
             return NS_BASE_STREAM_WOULD_BLOCK;
     }
 
-    SOCKET_LOG(("  calling PR_Read [count=%u]\n", count));
+  //  SOCKET_LOG(("  calling PR_Read [count=%u]\n", count));
 
     // cannot hold lock while calling NSPR.  (worried about the fact that PSM
     // synchronously proxies notifications over to the UI thread, which could
     // mistakenly try to re-enter this code.)
-    int32_t n = PR_Read(fd, buf, count);
-
-    SOCKET_LOG(("  PR_Read returned [n=%d]\n", n));
-
+  //  int32_t n = PR_Read(fd, buf, count);
+
+  //  SOCKET_LOG(("  PR_Read returned [n=%d]\n", n));
+
+    int32_t n;
+#if 0
+#if defined(ENABLE_SCTP)
+    if (PR_GetDescType(fd) == PR_DESC_SOCKET_SCTP_ONE_TO_ONE) {
+        PRNetAddr from;
+        uint32_t fromlen;
+#if defined(SCTP_HAVE_EXTRCVINFO)
+        PRSctp_ExtRcvInfo eri;            // Darwin & FreeBSD only
+#else
+        PRSctp_SndRcvInfo eri;
+#endif
+        PRSctp_SndRcvInfo *sri = (PRSctp_SndRcvInfo *)&eri;
+        int32_t msg_flags;
+        fromlen = sizeof(from);
+        memset(&eri, 0, sizeof(eri));
+        msg_flags = 0;
+        SOCKET_LOG(("  calling PR_SctpRecvmsg [count=%u]\n", count));
+        n = PR_SctpRecvmsg(fd, buf, count, &from, &fromlen, sri, &msg_flags,
+                           PR_INTERVAL_NO_TIMEOUT);
+        SOCKET_LOG(("  PR_SctpRecvmsg returned [n=%d]\n", n));
+        mTransport->mNextSctpInputStreamId = -1;
+#if defined(SCTP_HAVE_EXTRCVINFO)
+        if (n > 0 && eri.serinfo_next_flags & SCTP_NEXT_MSG_AVAIL)
+            mTransport->mNextSctpInputStreamId = eri.serinfo_next_stream;
+#endif
+    }
+    else
+    {
+#endif
+#endif
+        SOCKET_LOG(("  calling PR_Read [count=%u]\n", count));
+        n = PR_Read(fd, buf, count);
+        SOCKET_LOG(("  PR_Read returned [n=%d]\n", n));
+#if 0
+#if defined(ENABLE_SCTP)
+    }
+#endif
+#endif
     nsresult rv = NS_OK;
     {
         MutexAutoLock lock(mTransport->mLock);
 
 #ifdef ENABLE_SOCKET_TRACING
         if (n > 0)
             mTransport->TraceInBuf(buf, n);
 #endif
@@ -599,25 +642,50 @@ nsSocketOutputStream::Write(const char *
         if (NS_FAILED(mCondition))
             return mCondition;
         
         fd = mTransport->GetFD_Locked();
         if (!fd)
             return NS_BASE_STREAM_WOULD_BLOCK;
     }
 
-    SOCKET_LOG(("  calling PR_Write [count=%u]\n", count));
 
     // cannot hold lock while calling NSPR.  (worried about the fact that PSM
     // synchronously proxies notifications over to the UI thread, which could
     // mistakenly try to re-enter this code.)
-    int32_t n = PR_Write(fd, buf, count);
-
-    SOCKET_LOG(("  PR_Write returned [n=%d]\n", n));
-
+  //  int32_t n = PR_Write(fd, buf, count);
+
+    int32_t n;
+#if 0
+#if defined(ENABLE_SCTP)
+    uint16_t SendStream;
+    if (PR_GetDescType(fd) == PR_DESC_SOCKET_SCTP_ONE_TO_ONE) {
+        SendStream = mTransport->mNextSctpOutputStreamId;
+        NS_ASSERTION(SendStream >= 0 &&
+                     SendStream < mTransport->mNumberOfSctpStreams,
+                     "Invalid SCTP stream ID");
+        SOCKET_LOG(("  calling PR_SctpSendmsg [count=%u]\n", count));
+        n = PR_SctpSendmsg(fd, buf, count, NULL, 0, 0, 0, SendStream, 0, 0, 0);
+        SOCKET_LOG(("  PR_Sctp_Sendmsg returned [n=%d]\n", n));
+
+        if (n > 0)
+            mTransport->mNextSctpOutputStreamId =
+                ++(mTransport->mNextSctpOutputStreamId) %
+                mTransport->mNumberOfSctpStreams;
+    }
+    else
+#endif
+#endif
+    {
+        SOCKET_LOG(("  calling PR_Write [count=%u]\n", count));
+
+        n = PR_Write(fd, buf, count);
+
+        SOCKET_LOG(("  PR_Write returned [n=%d]\n", n));
+    }
     nsresult rv = NS_OK;
     {
         MutexAutoLock lock(mTransport->mLock);
 
 #ifdef ENABLE_SOCKET_TRACING
         if (n > 0)
             mTransport->TraceOutBuf(buf, n);
 #endif
@@ -751,16 +819,19 @@ nsSocketTransport::nsSocketTransport()
     , mSocketTransportService(gSocketTransportService)
     , mInput(this)
     , mOutput(this)
     , mQoSBits(0x00)
     , mKeepaliveEnabled(false)
     , mKeepaliveIdleTimeS(-1)
     , mKeepaliveRetryIntervalS(-1)
     , mKeepaliveProbeCount(-1)
+    , mNextSctpInputStreamId (-1)
+    , mNextSctpOutputStreamId (-1)
+    , mNumberOfSctpStreams (0)
 {
     SOCKET_LOG(("creating nsSocketTransport @%p\n", this));
 
     mTimeouts[TIMEOUT_CONNECT]    = UINT16_MAX; // no timeout
     mTimeouts[TIMEOUT_READ_WRITE] = UINT16_MAX; // no timeout
 }
 
 nsSocketTransport::~nsSocketTransport()
@@ -1081,22 +1152,74 @@ nsSocketTransport::BuildSocket(PRFileDes
 
     nsresult rv;
 
     proxyTransparent = false;
     usingSSL = false;
 
     if (mTypeCount == 0) {
 #if defined(ENABLE_SCTP)
-printf("SCTP: %s:%d PR_OpenSCTPOneToOneSocket\n", __FILE__, __LINE__);
         fd = PR_OpenSCTPOneToOneSocket(mNetAddr.raw.family);
 #else
         fd = PR_OpenTCPSocket(mNetAddr.raw.family);
 #endif
         rv = fd ? NS_OK : NS_ERROR_OUT_OF_MEMORY;
+#if defined(ENABLE_SCTP)
+        if (PR_GetDescType(fd) == PR_DESC_SOCKET_SCTP_ONE_TO_ONE) {
+            if (NS_SUCCEEDED(rv)) {
+                // Subscribe to sctp_data_io_event.
+                PRSocketOptionData sod;
+                memset(&sod, 0, sizeof(sod));
+                sod.option = PR_SockOpt_Events;
+                sod.value.events.sctp_data_io_event = 1;
+                if (PR_SetSocketOption(fd, &sod) != PR_SUCCESS) {
+                    return NS_ERROR_SOCKET_OPTION_FAILED;
+                }
+                // Enable sctp_extrcvinfo.  Darwin & FreeBSD only
+#if defined(SCTP_HAVE_EXTRCVINFO)
+                memset(&sod, 0, sizeof(sod));
+                sod.option = PR_SockOpt_UseExtRcvInfo;
+                sod.value.useextrcvinfo = true;
+                if (PR_SetSocketOption(fd, &sod) != PR_SUCCESS)
+                    return NS_ERROR_SOCKET_OPTION_FAILED;
+#endif
+                // Get the current values for SCTP_INITMSG.
+                memset(&sod, 0, sizeof(sod));
+                sod.option = PR_SockOpt_InitMsg;
+                if (PR_SetSocketOption(fd, &sod) != PR_SUCCESS) {
+                    return NS_ERROR_SOCKET_OPTION_FAILED;
+                }
+                // Retrieve the max outgoing stream preference setting
+                nsCOMPtr<nsIPrefBranch> prefs =
+                    do_GetService("@mozilla.org/preferences-service;1", &rv);
+                if (NS_FAILED(rv)) {
+                    return rv;
+                }
+
+                rv = NS_OK;
+                int32_t val = 0;
+                if (mNumberOfSctpStreams == 0) {
+                    rv = mSocketTransportService->GetMaxNumberOfSctpStreams(&val);
+                    if (NS_WARN_IF(NS_FAILED(rv))) {
+                        return rv;
+                    }
+                }
+
+                // Set the maximum number of outgoing SCTP streams.
+                sod.value.initmsg.sinit_num_ostreams = (uint16_t) val;
+                sod.option = PR_SockOpt_InitMsg;
+                if (PR_SetSocketOption(fd, &sod) != PR_SUCCESS) {
+                    return NS_ERROR_SOCKET_OPTION_FAILED;
+                }
+                // Initialize next SCTP output stream ID.
+                mNextSctpOutputStreamId = 0;
+                printf("numberof streams: %d\n", val);
+            }
+        }
+#endif
     }
     else {
 #if defined(XP_UNIX)
         MOZ_ASSERT(!mNetAddrIsSet || mNetAddr.raw.family != AF_LOCAL,
                    "Unix domain sockets can't be used with socket types");
 #endif
 
         fd = nullptr;
@@ -1428,16 +1551,23 @@ nsSocketTransport::InitiateSocket()
             Telemetry::PRCONNECT_BLOCKING_TIME_LINK_CHANGE,
             Telemetry::PRCONNECT_BLOCKING_TIME_OFFLINE);
     }
 
     if (status == PR_SUCCESS) {
         // 
         // we are connected!
         //
+#if 0
+#if defined(ENABLE_SCTP)
+        rv = SetNumberOfOutgoingSctpStreams(fd);
+        if(NS_FAILED(rv))
+            return rv;
+#endif
+#endif
         OnSocketConnected();
     }
     else {
         PRErrorCode code = PR_GetError();
 #if defined(TEST_CONNECT_ERRORS)
         code = RandomizeConnectError(code);
 #endif
         //
@@ -1447,16 +1577,23 @@ nsSocketTransport::InitiateSocket()
             mPollFlags = (PR_POLL_EXCEPT | PR_POLL_WRITE);
         //
         // If the socket is already connected, then return success...
         //
         else if (PR_IS_CONNECTED_ERROR == code) {
             //
             // we are connected!
             //
+#if 0
+#if defined(ENABLE_SCTP)
+            rv = SetNumberOfOutgoingSctpStreams(fd);
+            if(NS_FAILED(rv))
+               return rv;
+#endif
+#endif
             OnSocketConnected();
 
             if (mSecInfo && !mProxyHost.IsEmpty() && proxyTransparent && usingSSL) {
                 // if the connection phase is finished, and the ssl layer has
                 // been pushed, and we were proxying (transparently; ie. nothing
                 // has to happen in the protocol layer above us), it's time for
                 // the ssl to start doing it's thing.
                 nsCOMPtr<nsISSLSocketControl> secCtrl =
@@ -1680,16 +1817,45 @@ nsSocketTransport::OnSocketConnected()
         if (NS_WARN_IF(NS_FAILED(rv))) {
             SOCKET_LOG(("  SetKeepaliveEnabledInternal failed rv[0x%x]", rv));
         }
     }
 
     SendStatus(NS_NET_STATUS_CONNECTED_TO);
 }
 
+
+#if 0
+#if defined(ENABLE_SCTP)
+NS_IMETHODIMP
+nsSocketTransport::SetNumberOfOutgoingSctpStreams(PRFileDesc *fd)
+{
+    nsresult rv;
+    bool socketIsSctp;
+
+    rv = IsSctpSocket(&socketIsSctp);
+    if (NS_FAILED(rv))
+        return rv;
+    if (!socketIsSctp)
+        return NS_ERROR_INVALID_SOCKET_TYPE;
+
+    // Get status to see how many outgoing streams were allowed by remote host
+    PRSocketOptionData sod;
+    memset(&sod, 0, sizeof(sod));
+    sod.option = PR_SockOpt_Status;
+    if (PR_GetSocketOption(fd, &sod) != PR_SUCCESS)
+        return NS_ERROR_SOCKET_OPTION_FAILED;
+
+    // Set number of outgoing SCTP streams
+    mNumberOfSctpStreams = sod.value.status.sstat_outstrms;
+    return NS_OK;
+}
+#endif
+#endif
+
 PRFileDesc *
 nsSocketTransport::GetFD_Locked()
 {
     mLock.AssertCurrentThreadOwns();
 
     // mFD is not available to the streams while disconnected.
     if (!mFDconnected)
         return nullptr;
@@ -1742,16 +1908,151 @@ nsSocketTransport::ReleaseFD_Locked(PRFi
             PR_Close(mFD);
         } else {
             // Can't PR_Close() a socket off STS thread. Thunk it to STS to die
             STS_PRCloseOnSocketTransport(mFD);
         }
         mFD = nullptr;
     }
 }
+#if 0
+#if defined(ENABLE_SCTP)
+// Update mNextSctpInputStreamId by doing a peek
+NS_IMETHODIMP
+nsSocketTransport::UpdateNextSctpInputStreamId()
+{
+    nsresult rv = NS_OK;
+
+    char c;
+    int32_t n;
+    PRNetAddr from;
+    uint32_t fromlen;
+    int msg_flags = PR_MSG_PEEK;
+#if defined(SCTP_HAVE_EXTRCVINFO)
+    PRSctp_ExtRcvInfo eri;            // Darwin & FreeBSD only
+#else
+    PRSctp_SndRcvInfo eri;
+#endif
+    PRSctp_SndRcvInfo *sri = (PRSctp_SndRcvInfo*)&eri;
+    fromlen = sizeof(from);
+    memset(sri, 0, sizeof(eri));
+#if defined(SCTP_1_BYTE_PEEK)  // Some implementations must read a byte to peek
+    n = PR_SctpRecvmsg(mFD, &c, 1, &from, &fromlen, sri, &msg_flags, 0);
+#else                          // Some linux implementations consume bytes when peeking
+    n = PR_SctpRecvmsg(mFD, &c, 0, &from, &fromlen, sri, &msg_flags, 0);
+#endif
+    mNextSctpInputStreamId = -1;
+
+    if (n >= 0) {
+        if (n == 0 && PR_GetError() == PR_NOT_CONNECTED_ERROR) {
+            rv = NS_BASE_STREAM_CLOSED;
+        }
+        else {
+            mNextSctpInputStreamId = sri->sinfo_stream;
+            NS_ASSERTION(mNextSctpInputStreamId >= 0 &&
+                         mNextSctpInputStreamId < mNumberOfSctpStreams,
+                         "Invalid SCTP stream ID");
+        }
+    }
+    else if (PR_GetError() == PR_WOULD_BLOCK_ERROR)
+        rv = NS_BASE_STREAM_WOULD_BLOCK;
+    else
+        rv = NS_BASE_STREAM_CLOSED;
+
+    return rv;
+}
+#endif
+
+
+NS_IMETHODIMP
+nsSocketTransport::GetNextSctpInputStreamId(int32_t* aSctpStreamID)
+{
+#if !defined(ENABLE_SCTP)
+    return NS_ERROR_NOT_IMPLEMENTED;
+#else
+    nsresult rv;
+    bool socketIsSctp;
+
+    rv = IsSctpSocket(&socketIsSctp);
+    if (NS_FAILED(rv))
+        return rv;
+
+    if (!socketIsSctp)
+        return NS_ERROR_INVALID_SOCKET_TYPE;
+    else
+        rv = NS_OK;
+
+    // If mNextSctpInputStreamId is invalid, update it.
+    if (mNextSctpInputStreamId == -1)
+        rv = UpdateNextSctpInputStreamId();
+
+    *aSctpStreamID = mNextSctpInputStreamId;
+
+    return rv;
+#endif
+}
+
+NS_IMETHODIMP
+nsSocketTransport::GetNextSctpOutputStreamId(int32_t* aSctpStreamID)
+{
+#if !defined(ENABLE_SCTP)
+    return NS_ERROR_NOT_IMPLEMENTED;
+#else
+    nsresult rv = NS_ERROR_FAILURE;
+    bool socketIsSctp;
+
+    rv = IsSctpSocket(&socketIsSctp);
+    if (NS_FAILED(rv))
+        return rv;
+    if (!socketIsSctp)
+        return NS_ERROR_INVALID_SOCKET_TYPE;
+
+    *aSctpStreamID = mNextSctpOutputStreamId;
+    return NS_OK;
+#endif
+}
+
+NS_IMETHODIMP
+nsSocketTransport::GetNumberOfSctpStreams(int32_t* aNumberOfStreams)
+{
+#if !defined(ENABLE_SCTP)
+    return NS_ERROR_NOT_IMPLEMENTED;
+#else
+    nsresult rv;
+    bool socketIsSctp;
+
+    rv = IsSctpSocket(&socketIsSctp);
+    if (NS_FAILED(rv))
+        return rv;
+    if (!socketIsSctp)
+        return NS_ERROR_INVALID_SOCKET_TYPE;
+
+    *aNumberOfStreams = mNumberOfSctpStreams;
+    return NS_OK;
+#endif
+}
+
+NS_IMETHODIMP
+nsSocketTransport::IsSctpSocket(bool *aResult)
+{
+#if !defined(ENABLE_SCTP)
+    return NS_ERROR_NOT_IMPLEMENTED;
+#else
+    *aResult = false;
+
+    if (mFD.IsInitialized()) {
+        if (PR_GetDescType(mFD) == PR_DESC_SOCKET_SCTP_ONE_TO_ONE)
+            *aResult = true;
+        return NS_OK;
+    }
+    else
+        return NS_ERROR_SOCKET_DOES_NOT_EXIST;
+#endif
+}
+#endif
 
 //-----------------------------------------------------------------------------
 // socket event handler impl
 
 void
 nsSocketTransport::OnSocketEvent(uint32_t type, nsresult status, nsISupports *param)
 {
     SOCKET_LOG(("nsSocketTransport::OnSocketEvent [this=%p type=%u status=%x param=%p]\n",
@@ -1882,16 +2183,29 @@ nsSocketTransport::OnSocketReady(PRFileD
             mPollFlags &= ~PR_POLL_WRITE;
             mOutput.OnSocketReady(NS_OK);
         }
         // if waiting to read and socket is readable or hit an exception.
         if ((mPollFlags & PR_POLL_READ) && (outFlags & ~PR_POLL_WRITE)) {
             // assume that we won't need to poll any longer (the stream will
             // request that we poll again if it is still pending).
             mPollFlags &= ~PR_POLL_READ;
+
+#if 0
+#if defined(ENABLE_SCTP)
+            // if SCTP socket, get stream on which data arrived
+            if (fd->methods->file_type == PR_DESC_SOCKET_SCTP_ONE_TO_ONE) {
+                if (NS_FAILED(UpdateNextSctpInputStreamId()))
+                    mInput.OnSocketReady(NS_ERROR_FAILURE);
+                else
+                    mInput.OnSocketReady(NS_OK);
+            }
+            else  // not SCTP
+#endif
+#endif
             mInput.OnSocketReady(NS_OK);
         }
         // Update poll timeout in case it was changed
         mPollTimeout = mTimeouts[TIMEOUT_READ_WRITE];
     }
     else if (mState == STATE_CONNECTING) {
 
         // We use PRIntervalTime here because we need
@@ -1914,16 +2228,23 @@ nsSocketTransport::OnSocketReady(PRFileD
         }
 
         if (status == PR_SUCCESS) {
             //
             // we are connected!
             //
             OnSocketConnected();
 
+            OnSocketConnected();
+#if 0
+#if defined(ENABLE_SCTP)
+            if (NS_FAILED(SetNumberOfOutgoingSctpStreams(fd)))
+                mInput.OnSocketReady(NS_ERROR_FAILURE);
+#endif
+#endif
             if (mSocketTransportService->IsTelemetryEnabled()) {
                 if (mNetAddr.raw.family == AF_INET) {
                     Telemetry::Accumulate(
                         Telemetry::IPV4_AND_IPV6_ADDRESS_CONNECTIVITY,
                         SUCCESSFUL_CONNECTING_TO_IPV4_ADDRESS);
                 } else if (mNetAddr.raw.family == AF_INET6) {
                     Telemetry::Accumulate(
                         Telemetry::IPV4_AND_IPV6_ADDRESS_CONNECTIVITY,
@@ -2258,21 +2579,31 @@ nsSocketTransport::IsAlive(bool *result)
     PRFileDescAutoLock fd(this, &conditionWhileLocked);
     if (NS_FAILED(conditionWhileLocked) || !fd.IsInitialized()) {
         return NS_OK;
     }
 
     // XXX do some idle-time based checks??
 
     char c;
-    int32_t rval = PR_Recv(fd, &c, 1, PR_MSG_PEEK, 0);
-
-    if ((rval > 0) || (rval < 0 && PR_GetError() == PR_WOULD_BLOCK_ERROR))
-        *result = true;
-
+    int32_t rval;
+#if 0
+#if defined(ENABLE_SCTP)
+    if (PR_GetDescType(fd) == PR_DESC_SOCKET_SCTP_ONE_TO_ONE) {
+        nsresult rv;
+        rv = UpdateNextSctpInputStreamId();
+        if (NS_SUCCEEDED(rv) || rv == NS_BASE_STREAM_WOULD_BLOCK)
+            *result = true;
+    }
+    else
+#endif
+#endif
+        if (((rval = PR_Recv(fd, &c, 1, PR_MSG_PEEK, 0)) > 0) ||
+            (rval < 0 && PR_GetError() == PR_WOULD_BLOCK_ERROR))
+            *result = true;
     return NS_OK;
 }
 
 NS_IMETHODIMP
 nsSocketTransport::GetHost(nsACString &host)
 {
     host = SocketHost();
     return NS_OK;
diff --git a/netwerk/base/nsSocketTransport2.h b/netwerk/base/nsSocketTransport2.h
--- a/netwerk/base/nsSocketTransport2.h
+++ b/netwerk/base/nsSocketTransport2.h
@@ -371,16 +371,22 @@ private:
     nsSocketOutputStream mOutput;
 
     friend class nsSocketInputStream;
     friend class nsSocketOutputStream;
 
     // socket timeouts are not protected by any lock.
     uint16_t mTimeouts[2];
 
+#if defined(ENABLE_SCTP)
+        // SCTP Stream Id tracking information
+    int32_t  mNextSctpInputStreamId;   // Need to allow -1 as a legitimate value
+    uint16_t mNextSctpOutputStreamId;
+    uint16_t mNumberOfSctpStreams;
+#endif
     // QoS setting for socket
     uint8_t mQoSBits;
 
     //
     // mFD access methods: called with mLock held.
     //
     PRFileDesc *GetFD_Locked();
     void        ReleaseFD_Locked(PRFileDesc *fd);
diff --git a/netwerk/base/nsSocketTransportService2.cpp b/netwerk/base/nsSocketTransportService2.cpp
--- a/netwerk/base/nsSocketTransportService2.cpp
+++ b/netwerk/base/nsSocketTransportService2.cpp
@@ -35,16 +35,19 @@ PRLogModuleInfo *gUDPSocketLog = nullptr
 nsSocketTransportService *gSocketTransportService = nullptr;
 PRThread                 *gSocketThread           = nullptr;
 
 #define SEND_BUFFER_PREF "network.tcp.sendbuffer"
 #define KEEPALIVE_ENABLED_PREF "network.tcp.keepalive.enabled"
 #define KEEPALIVE_IDLE_TIME_PREF "network.tcp.keepalive.idle_time"
 #define KEEPALIVE_RETRY_INTERVAL_PREF "network.tcp.keepalive.retry_interval"
 #define KEEPALIVE_PROBE_COUNT_PREF "network.tcp.keepalive.probe_count"
+#if defined(ENABLE_SCTP)
+#define MAX_NUM_SCTP_STREAMS "network.http.sctp.max-number-of-outgoing-streams"
+#endif
 #define SOCKET_LIMIT_TARGET 550U
 #define SOCKET_LIMIT_MIN     50U
 #define BLIP_INTERVAL_PREF "network.activity.blipIntervalMilliseconds"
 #define MAX_TIME_BETWEEN_TWO_POLLS "network.sts.max_time_for_events_between_two_polls"
 #define TELEMETRY_PREF "toolkit.telemetry.enabled"
 
 uint32_t nsSocketTransportService::gMaxCount;
 PRCallOnceType nsSocketTransportService::gMaxCountInitOnce;
@@ -546,16 +549,19 @@ nsSocketTransportService::Init()
     if (tmpPrefService) {
         tmpPrefService->AddObserver(SEND_BUFFER_PREF, this, false);
         tmpPrefService->AddObserver(KEEPALIVE_ENABLED_PREF, this, false);
         tmpPrefService->AddObserver(KEEPALIVE_IDLE_TIME_PREF, this, false);
         tmpPrefService->AddObserver(KEEPALIVE_RETRY_INTERVAL_PREF, this, false);
         tmpPrefService->AddObserver(KEEPALIVE_PROBE_COUNT_PREF, this, false);
         tmpPrefService->AddObserver(MAX_TIME_BETWEEN_TWO_POLLS, this, false);
         tmpPrefService->AddObserver(TELEMETRY_PREF, this, false);
+#if defined(ENABLE_SCTP)
+        tmpPrefService->AddObserver(MAX_NUM_SCTP_STREAMS, this, false);
+#endif
     }
     UpdatePrefs();
 
     nsCOMPtr<nsIObserverService> obsSvc = services::GetObserverService();
     if (obsSvc) {
         obsSvc->AddObserver(this, "profile-initial-state", false);
         obsSvc->AddObserver(this, "last-pb-context-exited", false);
     }
@@ -671,16 +677,29 @@ nsSocketTransportService::GetKeepalivePr
     MOZ_ASSERT(aKeepaliveProbeCount);
     if (NS_WARN_IF(!aKeepaliveProbeCount)) {
         return NS_ERROR_NULL_POINTER;
     }
     *aKeepaliveProbeCount = mKeepaliveProbeCount;
     return NS_OK;
 }
 
+#if defined(ENABLE_SCTP)
+NS_IMETHODIMP
+nsSocketTransportService::GetMaxNumberOfSctpStreams(int32_t *aNumberOfSctpStreams)
+{
+    MOZ_ASSERT(aNumberOfSctpStreams);
+    if (NS_WARN_IF(!aNumberOfSctpStreams)) {
+        return NS_ERROR_NULL_POINTER;
+    }
+    *aNumberOfSctpStreams = mNumberOfSctpStreams;
+    return NS_OK;
+}
+#endif
+
 NS_IMETHODIMP
 nsSocketTransportService::CreateTransport(const char **types,
                                           uint32_t typeCount,
                                           const nsACString &host,
                                           int32_t port,
                                           nsIProxyInfo *proxyInfo,
                                           nsISocketTransport **result)
 {
@@ -1184,16 +1203,24 @@ nsSocketTransportService::UpdatePrefs()
                                                1, kMaxTCPKeepIntvl);
 
         int32_t keepaliveProbeCount;
         rv = tmpPrefService->GetIntPref(KEEPALIVE_PROBE_COUNT_PREF,
                                         &keepaliveProbeCount);
         if (NS_SUCCEEDED(rv))
             mKeepaliveProbeCount = clamped(keepaliveProbeCount,
                                            1, kMaxTCPKeepCount);
+#if defined(ENABLE_SCTP)
+        int32_t maxNumSctpStreams;
+        rv = tmpPrefService->GetIntPref(MAX_NUM_SCTP_STREAMS,
+                                        &maxNumSctpStreams);
+        if (NS_SUCCEEDED(rv))
+            mNumberOfSctpStreams = clamped(maxNumSctpStreams,
+                                           1, kMaxSCTPNumStreams);
+#endif
         bool keepaliveEnabled = false;
         rv = tmpPrefService->GetBoolPref(KEEPALIVE_ENABLED_PREF,
                                          &keepaliveEnabled);
         if (NS_SUCCEEDED(rv) && keepaliveEnabled != mKeepaliveEnabledPref) {
             mKeepaliveEnabledPref = keepaliveEnabled;
             OnKeepaliveEnabledPrefChange();
         }
 
diff --git a/netwerk/base/nsSocketTransportService2.h b/netwerk/base/nsSocketTransportService2.h
--- a/netwerk/base/nsSocketTransportService2.h
+++ b/netwerk/base/nsSocketTransportService2.h
@@ -46,16 +46,19 @@ extern PRLogModuleInfo *gUDPSocketLog;
 //-----------------------------------------------------------------------------
 
 namespace mozilla {
 namespace net {
 // These maximums are borrowed from the linux kernel.
 static const int32_t kMaxTCPKeepIdle  = 32767; // ~9 hours.
 static const int32_t kMaxTCPKeepIntvl = 32767;
 static const int32_t kMaxTCPKeepCount   = 127;
+#if defined(ENABLE_SCTP)
+static const int32_t kMaxSCTPNumStreams = 65535;
+#endif
 static const int32_t kDefaultTCPKeepCount =
 #if defined (XP_WIN)
                                               10; // Hardcoded in Windows.
 #elif defined (XP_MACOSX)
                                               8;  // Hardcoded in OSX.
 #else
                                               4;  // Specifiable in Linux.
 #endif
@@ -110,16 +113,19 @@ public:
     void GetSocketConnections(nsTArray<mozilla::net::SocketInfo> *);
     uint64_t GetSentBytes() { return mSentBytesCount; }
     uint64_t GetReceivedBytes() { return mReceivedBytesCount; }
 
     // Returns true if keepalives are enabled in prefs.
     bool IsKeepaliveEnabled() { return mKeepaliveEnabledPref; }
 
     bool IsTelemetryEnabled() { return mTelemetryEnabledPref; }
+#if defined(ENABLE_SCTP)
+    NS_IMETHODIMP GetMaxNumberOfSctpStreams(int32_t *aNumberOfSctpStreams);
+#endif
 protected:
 
     virtual ~nsSocketTransportService();
 
 private:
 
     //-------------------------------------------------------------------------
     // misc (any thread)
@@ -232,16 +238,20 @@ private:
     int32_t     mKeepaliveIdleTimeS;
     // Number of seconds between retries should keepalive pings fail.
     int32_t     mKeepaliveRetryIntervalS;
     // Number of keepalive probes to send.
     int32_t     mKeepaliveProbeCount;
     // True if TCP keepalive is enabled globally.
     bool        mKeepaliveEnabledPref;
 
+#if defined(ENABLE_SCTP)
+    uint16_t mNumberOfSctpStreams;
+#endif
+
     mozilla::Atomic<bool>  mServingPendingQueue;
     mozilla::Atomic<int32_t, mozilla::Relaxed> mMaxTimePerPollIter;
     mozilla::Atomic<bool, mozilla::Relaxed>  mTelemetryEnabledPref;
 
     void OnKeepaliveEnabledPrefChange();
     void NotifyKeepaliveEnabledPrefChange(SocketContext *sock);
 
     // Socket thread only for dynamically adjusting max socket size
diff --git a/xpcom/base/ErrorList.h b/xpcom/base/ErrorList.h
--- a/xpcom/base/ErrorList.h
+++ b/xpcom/base/ErrorList.h
@@ -260,16 +260,31 @@
   /* The specified socket type does not exist. */
   ERROR(NS_ERROR_UNKNOWN_SOCKET_TYPE,   FAILURE(51)),
   /* The specified socket type could not be created. */
   ERROR(NS_ERROR_SOCKET_CREATE_FAILED,  FAILURE(52)),
   /* The operating system doesn't support the given type of address. */
   ERROR(NS_ERROR_SOCKET_ADDRESS_NOT_SUPPORTED, FAILURE(53)),
   /* The address to which we tried to bind the socket was busy. */
   ERROR(NS_ERROR_SOCKET_ADDRESS_IN_USE, FAILURE(54)),
+#if defined(ENABLE_SCTP)
+/**
+ * The specified socket is of the wrong type.
+ * Returned by SCTP-only routines for TCP sockets
+ */
+  ERROR(NS_ERROR_INVALID_SOCKET_TYPE, FAILURE(53)),
+/**
+ * The specified socket does not exist.
+ */
+  ERROR(NS_ERROR_SOCKET_DOES_NOT_EXIST, FAILURE(54)),
+/**
+ * The attempt to set/get a socket option failed.
+ */
+  ERROR(NS_ERROR_SOCKET_OPTION_FAILED, FAILURE(55)),
+#endif
 
   /* Cache specific error codes: */
   ERROR(NS_ERROR_CACHE_KEY_NOT_FOUND,        FAILURE(61)),
   ERROR(NS_ERROR_CACHE_DATA_IS_STREAM,       FAILURE(62)),
   ERROR(NS_ERROR_CACHE_DATA_IS_NOT_STREAM,   FAILURE(63)),
   ERROR(NS_ERROR_CACHE_WAIT_FOR_VALIDATION,  FAILURE(64)),
   ERROR(NS_ERROR_CACHE_ENTRY_DOOMED,         FAILURE(65)),
   ERROR(NS_ERROR_CACHE_READ_ACCESS_DENIED,   FAILURE(66)),
@@ -282,16 +297,29 @@
   /* Effective TLD Service specific error codes: */
 
   /* The requested number of domain levels exceeds those present in the host
    * string. */
   ERROR(NS_ERROR_INSUFFICIENT_DOMAIN_LEVELS,  FAILURE(80)),
   /* The host string is an IP address. */
   ERROR(NS_ERROR_HOST_IS_IP_ADDRESS,          FAILURE(81)),
 
+#if defined(ENABLE_SCTP)
+ /**
+  * The next SCTP message is available to be read, but it is on a different SCTP
+  * stream than the SCTP message that has just been read.  This error implies
+  * NS_SCTP_WRONG_TRANSACTION, as well.
+  */
+  ERROR(NS_SCTP_INPUT_STREAM_ID_CHANGED,       FAILURE(90)),
+ /**
+  * The next SCTP message is available to be read, but it is does not belong
+  * to the current transaction.
+  */
+  ERROR(NS_SCTP_WRONG_TRANSACTION,             FAILURE(91)),
+#endif
 
   /* StreamLoader specific result codes: */
 
   /* Result code returned by nsIStreamLoaderObserver to indicate that the
    * observer is taking over responsibility for the data buffer, and the loader
    * should NOT free it. */
   ERROR(NS_SUCCESS_ADOPTED_DATA,  SUCCESS(90)),
 

